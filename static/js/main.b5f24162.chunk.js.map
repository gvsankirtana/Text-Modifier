{"version":3,"sources":["components/Navbar1.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar1","props","react_default","a","createElement","Navbar","bg","concat","mode","expand","Container","fluid","Brand","href","title","Toggle","aria-controls","Collapse","id","Nav","className","navbarScroll","Form","Check","type","label","onClick","toggleMode","propTypes","string","isRequired","defaultProps","abouttext","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","backgroundColor","Group","controlId","Control","as","rows","value","onChange","event","target","Button","disabled","length","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","join","filter","element","Alert","alert","role","msg","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.b5f24162.chunk.js","sourcesContent":["import React from 'react'\r\nimport propTypes from 'prop-types'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {Navbar,Nav,Form,Container} from 'react-bootstrap';\r\nexport default function (props) {\r\n  return (\r\n    <Navbar bg={`${props.mode}`} expand = \"md\">\r\n    <Container fluid>\r\n      <Navbar.Brand href=\"/\"><h2>{props.title}</h2></Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"navbarScroll\" />\r\n      <Navbar.Collapse id=\"navbarScroll\">\r\n        <Nav className=\"me-auto my-3\" navbarScroll>\r\n        </Nav>\r\n  <Form className={`text-${props.mode === 'light' ? 'dark' : 'light' }`}>\r\n  <Form.Check \r\n    type=\"switch\"\r\n    id=\"custom-switch text-light\"\r\n    label=\"Enable Dark Mode\"\r\n    onClick={props.toggleMode}\r\n  />\r\n  </Form>\r\n      </Navbar.Collapse>\r\n    </Container>\r\n  </Navbar>\r\n  )\r\n}\r\nNavbar.propTypes = {title:propTypes.string.isRequired}\r\nNavbar.defaultProps = {\r\n  title: 'Set title here',\r\n  abouttext : 'About text here'\r\n};"," import React,{useState} from 'react'\r\n import 'bootstrap/dist/css/bootstrap.css';\r\nimport { Button,Form,Container} from 'react-bootstrap';\r\nimport '../App.css';\r\nexport default function TextForm(props) {\r\n  let disabled = false;\r\n  const handleUpClick = () =>{\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Uppercase!\",\"success\");\r\n  }\r\n  const handleLoClick = () =>{\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    text&&props.showAlert(\"Converted to Lowercase!\",\"success\");\r\n    !text&&props.showAlert(\"Please Enter Text\",\"danger\");\r\n  }\r\n  const handleClearClick = () =>{\r\n    let newText = '';\r\n    setText(newText);\r\n    props.showAlert(\"Text cleared!\",\"success\");\r\n  }\r\n  const handleCopyClick = () =>{ \r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    document.getSelection().removeAllRanges();\r\n    props.showAlert(\"Copied to clipboard!\",\"success\");\r\n  }\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    text&&props.showAlert(\"Removed Extra spaces!\",\"success\");\r\n    !text&&props.showAlert(\"Please Enter Text\",\"danger\");\r\n  }\r\n  const handleOnChange = (event) =>{ \r\n    setText(event.target.value);\r\n  }\r\n  const[text,setText] = useState('');  \r\n // text = \"new text\";//wrong way to change the state\r\n // setText(\"new Text\");//correct way to change the state\r\n  return (\r\n    <>\r\n     <h2 className=\"mb-3\" style = {{color: props.mode === 'dark'?'white':'black'}}>{props.heading}</h2>\r\n     <Container style = {{ backgroundColor: props.mode === 'light'?'white':'#042048'}}>\r\n    <Form>\r\n  <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\r\n    <Form.Control id=\"myBox\" as=\"textarea\" rows={10} value={text} onChange = {handleOnChange} style = {{ backgroundColor: props.mode === 'dark'?'#12426b':'white',color: props.mode === 'dark'?'white':'black'}}/>\r\n  </Form.Group>\r\n  <Button disabled = {text.length === 0} className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to uppercase</Button>\r\n  <Button disabled = {text.length === 0} className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert to lowercase</Button>\r\n  <Button disabled = {text.length === 0} className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</Button>\r\n  <Button disabled = {text.length === 0} className=\"btn btn-primary mx-2\" onClick={handleCopyClick}>Copy Text</Button>\r\n  <Button disabled = {text.length === 0} className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>Remove Extra Spaces</Button>\r\n</Form>\r\n</Container>\r\n<Container className='my-3' style = {{ backgroundColor: props.mode === 'light'?'white':'#042048',color: props.mode === 'dark'?'white':'black'}}>\r\n<h2>Your text summary</h2>\r\n<h6 className='my-3'>{text.split(/\\s+/).filter((element)=>{return element.length!=0}).length} words and {text.length} characters</h6>\r\n<h6 className='my-3'>{0.008 * text.length} Minutes read</h6> \r\n<h2>Preview</h2>\r\n{!text && <h6 className='my-3' style={{color: \"red\"}}>Enter something in the text box above to preview it here</h6>}\r\n{text && <h6 className='my-3'>{text}</h6>}\r\n</Container>\r\n</>\r\n   )\r\n }\r\n ","import React from 'react'\r\nfunction Alert(props) {\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible`} role=\"alert\">\r\n   <strong>{props.alert.msg}</strong> \r\n</div>\r\n  )\r\n}\r\nexport default Alert","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport {Container} from 'react-bootstrap';\r\nimport Navbar1 from './components/Navbar1';\r\nimport TextForm from './components/TextForm';\r\nimport  Alert from './components/Alert';\r\nimport About from './components/About';\r\nimport './App.css';\r\n//const Container = Styled.Text;\r\n/*JSX pointer\r\n1) use curly brackets for using js\r\n2) camel casing for classNameName,etc.\r\n3) it's same as html\r\n4) use <> </>\r\n5)tags should be closed\r\n*/\r\nfunction App() {\r\n  const [mode, setMode] = useState('light')\r\n  const [alert, setAlert] = useState(null)\r\n const showAlert = (message,type) => {\r\n    setAlert({\r\n      msg: message,\r\n      type : type\r\n    })\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    },1500);\r\n }\r\n  const toggleMode = (props) => {\r\n    if(mode === 'light'){\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = '#042048';\r\n      showAlert(\"Dark mode has been enabled\",\"success\");\r\n      document.title = \"TextModifier - Dark Mode\"\r\n }\r\n    else{\r\n      setMode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n      showAlert(\"Light mode has been enabled\",\"success\");\r\n      document.title = \"TextModifier - Light Mode\"\r\n}\r\n }\r\n  return (\r\n    <>\r\n<Navbar1 title=\"Text Modifier\" mode={mode} toggleMode = {toggleMode}/>\r\n<Alert alert = {alert}/>\r\n<Container>\r\n    <TextForm showAlert={showAlert} heading=\"Try Text Modifier - Word counter, Character counter, Remove extra spaces\" mode={mode} />\r\n</Container>\r\n    </>\r\n  );\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')//add app component to root\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}